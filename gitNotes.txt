#Adds my signature globally (for all repositories) in this environment
git config --global user.name "NAME"
git config --global user.email "EMAIL"

#initializes a git repository
#creates a .git folder in the current working directory
git init

#takes a look at the staging area
#files can be
#    - untracked
#    - tracked
#    - committed (not in the staging area anymore)
git status

#shorter version of git status
git st

#adds changes in a file to the staging area
git add <file>

#creates a special file that acts as the bouncer to the staging area
#paths to be ignored are line-separated
#the file is allowed into the .git/ party
#    (shows the names of things not in party)
touch .gitignore

#commits the changes in the staging area to the commits area
#cleans out the staging area (prepares it for the next commit)
git commit -m "MESSAGE"

#takes a look at the commits area
#a bit verbose
git log

#like git log, but less verbose
#not built-in to git, but an alias we added on day 1
#also shows the commit log of the local and remote branches
git ll

#like git log, but extremely verbose
#the only command that shows the changes
#not built-in to git, but an alias we added on day 1
git la

#push the current branch (master) to branch (also master) on the origin remote
#the first master refers to the local branch
#the second master refers to the remote branch
#the -u flag sets the upstream (connects the two branches)
~/D/P/W/notebook master ✔ git push -u origin master

#once the local master branch is connected to a remote branch,
#    i don't need to specify the remote or branch names
~/D/P/W/notebook master ✔ git push

#add a remote called origin (key) that refers to a URL (value)
#allows me to push (and pull) commits to and from the remote
git remote add origin URL
